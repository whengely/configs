{
  "editor.lineNumbers": "relative",
  "editor.minimap.enabled": false,
  "editor.fontFamily": "Operator Mono Lig",
  "editor.fontLigatures": true,
  "editor.fontWeight": "100",
  "editor.fontSize": 16,
  "editor.rulers": [120],
  "editor.tabSize": 2,
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    {"language":"typescript", "autoFix": true},
    {"language":"typescriptreact", "autoFix": true},
  ],
  "importSorter.generalConfiguration.sortOnBeforeSave": true,
  "importSorter.importStringConfiguration.hasSemicolon": false,
  "importSorter.importStringConfiguration.tabSize": 2,
  "importSorter.importStringConfiguration.tabType": "space",
  "importSorter.importStringConfiguration.quoteMark": "single",
  "importSorter.importStringConfiguration.trailingComma": "multiLine",
  "importSorter.sortConfiguration.joinImportPaths": true,
  "importSorter.generalConfiguration.exclude": ["styled-components.tsx?"],
  "window.titleBarStyle": "custom",
  "workbench.editor.enablePreview": false,
  "explorer.openEditors.visible": 0,
  "workbench.iconTheme": "material-icon-theme",
  "workbench.settings.editor": "json",
  "breadcrumbs.enabled": true,
  "php.suggest.basic": false,
  "window.zoomLevel": 0,
  "vim.foldfix": true,
  "typescript.updateImportsOnFileMove.enabled": "always",
  "git.ignoreMissingGitWarning": true,
  "editor.tokenColorCustomizations": {
    "textMateRules": [
      {
        "scope": [
          // all comment types
          "comment",
          // true, false, null
          "constant.language",
          // import, from, export, default, return, if, for, break, continue, try, catch, finally,
          // throw, default, yield, await
          "keyword.control",
          // in, void, delete, instanceof
          "keyword.operator.expression",
          // debugger
          "keyword.other",
          // new
          "keyword.operator.new",
          // super, this, arguments
          "variable.language",
          // attributes in html, jsx, etc.
          "entity.other.attribute-name",
          // static, extends, async, private, public, implements
          // constructor, const, let, var, enum, class, function, interface
          // no explicit scopes for constructor, const, let, var
          // also no explicit scope for function without the arrow
          // therefore we enable all storage and explictly exclude the arrow in another scope
          "storage"
          // // no explicit scope for the eval keyword yet
          // // can be targeted with the scope below, but scope is too broad
          // "support.function",
          // // no explicit scope for the package keyword yet
          // // can be targeted with the scope below, but scope is too broad
          // "variable.other.readwrite",
        ],
        "settings": {
          "fontStyle": "italic"
        }
      },
      {
        "scope": [
          // function keyword does not have an explicit scope without the arrow
          // therefore we explictly exclude the function arrow from being italicized
          "storage.type.function.arrow"
        ],
        "settings": {
          "fontStyle": ""
        }
      }
    ]
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "sync.gist": "9dd54418188406d8fc3be778fd0795bc",
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  }
}
