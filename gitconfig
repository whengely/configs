[core]
  eol = lf 
  pager = cat
[user]
	name = Walt Hengely
	email = whengely@igsenergy.com

###############
# MERGE STUFF #
###############
[merge]
	tool = bc4

[mergetool]
	prompt = false
	keepBackup = false
[mergetool "bc4"]
	cmd = \"/mnt/c/Program Files/Beyond Compare 4/BCompare.exe\" \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\"
	trustExitCode = true

##############
# DIFF STUFF #
##############
[diff]
	tool = bc4
[difftool]
	prompt = false
	keepBackup = false

[difftool "bc4"]
	cmd = \"C:/Program Files/Beyond Compare 4/BCompare.exe\" \"$LOCAL\" \"$REMOTE\"
[difftool "code"]
	cmd = code --wait --diff $LOCAL $REMOTE

###########
# ALIASES #
###########

# you definitely want to use the full package of cmder as your terminal.  Or a real terminal on linux 
[alias]
	branch-name = "!git rev-parse --abbrev-ref HEAD"
  co = checkout
  c = commit -a
  e = config -e --global
  dev = "!git checkout develop"
  master = "!git checkout master"

  #list log easy to read
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
  #list log with files changed
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  #list with no colors if piping
  lnc = log --pretty=format:"%h\\ %s\\ [%cn]"


  # Create a new branch from jira ticket name
  ticket = "!f() { NAME=\"$@\"; CLEANED=`echo $NAME | sed -e 's/[[:space:]]/-/g' | tr -s '-'`; exec git checkout -b \"wh/$CLEANED\";};f"
  hotfix = "!f() { NAME=\"$@\"; CLEANED=`echo $NAME | sed -e 's/[[:space:]]/-/g' | tr -s '-'`; exec git checkout -b \"hotfix/$CLEANED\";};f"

	# Push the current branch to the remote "origin", and set it to track 
	# the upstream branch 
	publish = "!git push -u origin $(git branch-name)" 

	# Delete the remote version of the current branch 
	unpublish = "!git push origin :$(git branch-name)"

  # Clone IGS Shit
  cl = "!git clone igs-vsts@vs-ssh.visualstudio.com:v3/igs-vsts/IGS/$@"

	# Delete any branches that have been merged
	# See also: https://gist.github.com/robmiller/5133264
	delete-merged-branches-master = "!git checkout master && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # Prune remote
	rpo = remote prune origin

  #Used by a lot below
  fetch-master = "!git fetch -u origin master:master"
  # Complete common post PR Approval
  close-branch = "!f() { TOBEDELETED=$(git branch-name); git fetch-master; git rpo; git master; git branch -D \"$TOBEDELETED\";}; f"

  # Merge dev to branch
  update-branch = "!f() { git fetch-dev; git merge develop;};f"
  rebase-branch = "!f() { git fetch-dev; git rebase develop;};f"

  # If you want pull request aliases to work you need to download the following
  #https://github.com/Microsoft/vsts-cli
  create-pull-request-for-master = "!f() { exec vsts code pr create --auto-complete --delete-source-branch -t master \"$@\";};f"
	pull-request = "!f() { exec vsts code pr \"$@\"; }; f"
	repo = "!f() { exec vsts code repo \"$@\"; }; f"
[init]
	templatedir = ~/.git-templates
